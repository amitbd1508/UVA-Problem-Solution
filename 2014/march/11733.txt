#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstdlib>
#include<cctype>
using namespace std;
struct structedge{
    int u,v,w;

};
structedge roads[100050];
int set[100050];

bool comp(structedge e1,structedge e2)
{
    return e1.w<e2.w;
}

int getParent(int i,int *set)
{
    if(i==set[i])
        return i;
    else
        return (set[i]=getParent(set[i],set));
}

int isunion(int a,int b,int* set)
{
    return getParent(a,set)==getParent(b,set);
}

void Union(int a,int b,int* set)
{
    set[getParent(a,set)] = getParent(b,set);
}

int main()
{


    int test,testcase,n,v,i,j,cost,total,byair;
    scanf("%d",&test);
    testcase=1;
    while(test--)
    {
        scanf("%d %d %d",&n,&v,&cost);
        for(i=0;i<v;i++)
            scanf("%d %d %d",&roads[i].u,&roads[i].v,&roads[i].w);

        sort(roads,roads+v,comp);

        for(i=1;i<=n;i++)
            set[i]=i;
        total = 0;
        j=0;
        byair = 0;
        for(i=0;i<v&&j<n-1&&roads[i].w<cost;i++)
        {
            if(!isunion(roads[i].v,roads[i].u,set))
            {
                    total+=roads[i].w;
                    Union(roads[i].v,roads[i].u,set);
                    j++;
            }
        }
        for(i=1;i<=n;i++)
        {
            total+=cost*(set[i]==i);
            byair+=(set[i]==i);
        }
        printf("Case #%d: %d %d\n",testcase++,total,byair);
    }

return 0;

}


